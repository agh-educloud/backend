// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/homework.proto

package educloud

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Homework struct {
	HomeworkUuid         int32    `protobuf:"varint,1,opt,name=homeworkUuid,proto3" json:"homeworkUuid,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	MailTo               string   `protobuf:"bytes,3,opt,name=mailTo,proto3" json:"mailTo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Homework) Reset()         { *m = Homework{} }
func (m *Homework) String() string { return proto.CompactTextString(m) }
func (*Homework) ProtoMessage()    {}
func (*Homework) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ffa1a0a834cde22, []int{0}
}

func (m *Homework) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Homework.Unmarshal(m, b)
}
func (m *Homework) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Homework.Marshal(b, m, deterministic)
}
func (m *Homework) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Homework.Merge(m, src)
}
func (m *Homework) XXX_Size() int {
	return xxx_messageInfo_Homework.Size(m)
}
func (m *Homework) XXX_DiscardUnknown() {
	xxx_messageInfo_Homework.DiscardUnknown(m)
}

var xxx_messageInfo_Homework proto.InternalMessageInfo

func (m *Homework) GetHomeworkUuid() int32 {
	if m != nil {
		return m.HomeworkUuid
	}
	return 0
}

func (m *Homework) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Homework) GetMailTo() string {
	if m != nil {
		return m.MailTo
	}
	return ""
}

type Homeworks struct {
	Homework             []*Homework `protobuf:"bytes,1,rep,name=homework,proto3" json:"homework,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Homeworks) Reset()         { *m = Homeworks{} }
func (m *Homeworks) String() string { return proto.CompactTextString(m) }
func (*Homeworks) ProtoMessage()    {}
func (*Homeworks) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ffa1a0a834cde22, []int{1}
}

func (m *Homeworks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Homeworks.Unmarshal(m, b)
}
func (m *Homeworks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Homeworks.Marshal(b, m, deterministic)
}
func (m *Homeworks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Homeworks.Merge(m, src)
}
func (m *Homeworks) XXX_Size() int {
	return xxx_messageInfo_Homeworks.Size(m)
}
func (m *Homeworks) XXX_DiscardUnknown() {
	xxx_messageInfo_Homeworks.DiscardUnknown(m)
}

var xxx_messageInfo_Homeworks proto.InternalMessageInfo

func (m *Homeworks) GetHomework() []*Homework {
	if m != nil {
		return m.Homework
	}
	return nil
}

func init() {
	proto.RegisterType((*Homework)(nil), "Homework")
	proto.RegisterType((*Homeworks)(nil), "Homeworks")
}

func init() { proto.RegisterFile("protos/homework.proto", fileDescriptor_2ffa1a0a834cde22) }

var fileDescriptor_2ffa1a0a834cde22 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0xa9, 0xc5, 0xb5, 0x1d, 0x17, 0x91, 0xac, 0x4a, 0xe8, 0xa9, 0x54, 0x85, 0xe2, 0xa1,
	0x42, 0x7d, 0x01, 0xd1, 0x83, 0x1e, 0xa5, 0x75, 0x41, 0xbc, 0xd5, 0xcd, 0x88, 0xc1, 0x6c, 0x47,
	0xf2, 0x47, 0x5f, 0x5f, 0x8c, 0x4d, 0x16, 0x71, 0x6f, 0x99, 0xef, 0x37, 0xf3, 0x31, 0x19, 0x38,
	0xfe, 0xd0, 0x64, 0xc9, 0x5c, 0xbe, 0xd1, 0x1a, 0xbf, 0x48, 0xbf, 0x37, 0xbe, 0x2e, 0x16, 0x13,
	0x36, 0x76, 0xb0, 0xce, 0xfc, 0xc2, 0xea, 0x09, 0xb2, 0xfb, 0xa9, 0x8d, 0x55, 0x30, 0x0f, 0x23,
	0x4b, 0x27, 0x05, 0x4f, 0xca, 0xa4, 0xde, 0xed, 0xfe, 0x30, 0x76, 0x08, 0xa9, 0xd3, 0x8a, 0xef,
	0x94, 0x49, 0x9d, 0x77, 0x3f, 0x4f, 0x76, 0x02, 0xb3, 0xf5, 0x20, 0xd5, 0x23, 0xf1, 0xd4, 0xc3,
	0xa9, 0xaa, 0x5a, 0xc8, 0x83, 0xd9, 0xb0, 0x73, 0xc8, 0x82, 0x86, 0x27, 0x65, 0x5a, 0xef, 0xb7,
	0x79, 0x13, 0xd2, 0x2e, 0x46, 0xed, 0x35, 0xf0, 0x07, 0x8d, 0x06, 0x47, 0x8b, 0x3a, 0xc4, 0x3d,
	0xea, 0x4f, 0xb9, 0x42, 0x76, 0x06, 0x07, 0xb7, 0x1a, 0x07, 0x8b, 0x71, 0xdf, 0x8d, 0xa2, 0xd8,
	0x6b, 0x7a, 0xff, 0xab, 0xf6, 0x15, 0x16, 0x4b, 0xf3, 0x7f, 0xf8, 0x02, 0x8e, 0x7a, 0x1c, 0x45,
	0xc4, 0xa4, 0x9c, 0x95, 0x34, 0x6e, 0x53, 0xb0, 0x53, 0x98, 0xdf, 0xa1, 0xdd, 0xec, 0x1e, 0x82,
	0x02, 0x62, 0xb3, 0xb9, 0x81, 0xe7, 0x0c, 0x85, 0x5b, 0x29, 0x72, 0xe2, 0x65, 0xe6, 0x4f, 0x79,
	0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x2a, 0x89, 0x78, 0x78, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PresenterHomeworkServiceClient is the client API for PresenterHomeworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PresenterHomeworkServiceClient interface {
	CreateHomework(ctx context.Context, in *Homework, opts ...grpc.CallOption) (*Status, error)
}

type presenterHomeworkServiceClient struct {
	cc *grpc.ClientConn
}

func NewPresenterHomeworkServiceClient(cc *grpc.ClientConn) PresenterHomeworkServiceClient {
	return &presenterHomeworkServiceClient{cc}
}

func (c *presenterHomeworkServiceClient) CreateHomework(ctx context.Context, in *Homework, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/PresenterHomeworkService/CreateHomework", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenterHomeworkServiceServer is the server API for PresenterHomeworkService service.
type PresenterHomeworkServiceServer interface {
	CreateHomework(context.Context, *Homework) (*Status, error)
}

// UnimplementedPresenterHomeworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPresenterHomeworkServiceServer struct {
}

func (*UnimplementedPresenterHomeworkServiceServer) CreateHomework(ctx context.Context, req *Homework) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHomework not implemented")
}

func RegisterPresenterHomeworkServiceServer(s *grpc.Server, srv PresenterHomeworkServiceServer) {
	s.RegisterService(&_PresenterHomeworkService_serviceDesc, srv)
}

func _PresenterHomeworkService_CreateHomework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Homework)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenterHomeworkServiceServer).CreateHomework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PresenterHomeworkService/CreateHomework",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenterHomeworkServiceServer).CreateHomework(ctx, req.(*Homework))
	}
	return interceptor(ctx, in, info, handler)
}

var _PresenterHomeworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PresenterHomeworkService",
	HandlerType: (*PresenterHomeworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHomework",
			Handler:    _PresenterHomeworkService_CreateHomework_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/homework.proto",
}

// UserHomeworkServiceClient is the client API for UserHomeworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserHomeworkServiceClient interface {
	SendHomeworkSolution(ctx context.Context, in *Homework, opts ...grpc.CallOption) (*Status, error)
	GetHomeworks(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Homeworks, error)
}

type userHomeworkServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserHomeworkServiceClient(cc *grpc.ClientConn) UserHomeworkServiceClient {
	return &userHomeworkServiceClient{cc}
}

func (c *userHomeworkServiceClient) SendHomeworkSolution(ctx context.Context, in *Homework, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/UserHomeworkService/SendHomeworkSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHomeworkServiceClient) GetHomeworks(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Homeworks, error) {
	out := new(Homeworks)
	err := c.cc.Invoke(ctx, "/UserHomeworkService/GetHomeworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserHomeworkServiceServer is the server API for UserHomeworkService service.
type UserHomeworkServiceServer interface {
	SendHomeworkSolution(context.Context, *Homework) (*Status, error)
	GetHomeworks(context.Context, *Status) (*Homeworks, error)
}

// UnimplementedUserHomeworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserHomeworkServiceServer struct {
}

func (*UnimplementedUserHomeworkServiceServer) SendHomeworkSolution(ctx context.Context, req *Homework) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHomeworkSolution not implemented")
}
func (*UnimplementedUserHomeworkServiceServer) GetHomeworks(ctx context.Context, req *Status) (*Homeworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeworks not implemented")
}

func RegisterUserHomeworkServiceServer(s *grpc.Server, srv UserHomeworkServiceServer) {
	s.RegisterService(&_UserHomeworkService_serviceDesc, srv)
}

func _UserHomeworkService_SendHomeworkSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Homework)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHomeworkServiceServer).SendHomeworkSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHomeworkService/SendHomeworkSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHomeworkServiceServer).SendHomeworkSolution(ctx, req.(*Homework))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHomeworkService_GetHomeworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHomeworkServiceServer).GetHomeworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHomeworkService/GetHomeworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHomeworkServiceServer).GetHomeworks(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserHomeworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserHomeworkService",
	HandlerType: (*UserHomeworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHomeworkSolution",
			Handler:    _UserHomeworkService_SendHomeworkSolution_Handler,
		},
		{
			MethodName: "GetHomeworks",
			Handler:    _UserHomeworkService_GetHomeworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/homework.proto",
}
