// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/grpc/quiz.proto

package educloud

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QuizRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuizRequest) Reset()         { *m = QuizRequest{} }
func (m *QuizRequest) String() string { return proto.CompactTextString(m) }
func (*QuizRequest) ProtoMessage()    {}
func (*QuizRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1896ae7c6dd853, []int{0}
}

func (m *QuizRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuizRequest.Unmarshal(m, b)
}
func (m *QuizRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuizRequest.Marshal(b, m, deterministic)
}
func (m *QuizRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizRequest.Merge(m, src)
}
func (m *QuizRequest) XXX_Size() int {
	return xxx_messageInfo_QuizRequest.Size(m)
}
func (m *QuizRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuizRequest proto.InternalMessageInfo

func (m *QuizRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type QuizAnswer struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Answer               string   `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	Photo                []byte   `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuizAnswer) Reset()         { *m = QuizAnswer{} }
func (m *QuizAnswer) String() string { return proto.CompactTextString(m) }
func (*QuizAnswer) ProtoMessage()    {}
func (*QuizAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1896ae7c6dd853, []int{1}
}

func (m *QuizAnswer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuizAnswer.Unmarshal(m, b)
}
func (m *QuizAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuizAnswer.Marshal(b, m, deterministic)
}
func (m *QuizAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizAnswer.Merge(m, src)
}
func (m *QuizAnswer) XXX_Size() int {
	return xxx_messageInfo_QuizAnswer.Size(m)
}
func (m *QuizAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_QuizAnswer proto.InternalMessageInfo

func (m *QuizAnswer) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *QuizAnswer) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *QuizAnswer) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

type Question struct {
	ClassId              string   `protobuf:"bytes,1,opt,name=classId,proto3" json:"classId,omitempty"`
	GroupId              string   `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Answers              []string `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	PhotoQuestion        bool     `protobuf:"varint,4,opt,name=photoQuestion,proto3" json:"photoQuestion,omitempty"`
	ClosedQuestion       bool     `protobuf:"varint,5,opt,name=closedQuestion,proto3" json:"closedQuestion,omitempty"`
	OpenQuestion         bool     `protobuf:"varint,6,opt,name=openQuestion,proto3" json:"openQuestion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Question) Reset()         { *m = Question{} }
func (m *Question) String() string { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()    {}
func (*Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1896ae7c6dd853, []int{2}
}

func (m *Question) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Question.Unmarshal(m, b)
}
func (m *Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Question.Marshal(b, m, deterministic)
}
func (m *Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Question.Merge(m, src)
}
func (m *Question) XXX_Size() int {
	return xxx_messageInfo_Question.Size(m)
}
func (m *Question) XXX_DiscardUnknown() {
	xxx_messageInfo_Question.DiscardUnknown(m)
}

var xxx_messageInfo_Question proto.InternalMessageInfo

func (m *Question) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *Question) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Question) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *Question) GetPhotoQuestion() bool {
	if m != nil {
		return m.PhotoQuestion
	}
	return false
}

func (m *Question) GetClosedQuestion() bool {
	if m != nil {
		return m.ClosedQuestion
	}
	return false
}

func (m *Question) GetOpenQuestion() bool {
	if m != nil {
		return m.OpenQuestion
	}
	return false
}

func init() {
	proto.RegisterType((*QuizRequest)(nil), "QuizRequest")
	proto.RegisterType((*QuizAnswer)(nil), "QuizAnswer")
	proto.RegisterType((*Question)(nil), "Question")
}

func init() { proto.RegisterFile("protos/grpc/quiz.proto", fileDescriptor_3d1896ae7c6dd853) }

var fileDescriptor_3d1896ae7c6dd853 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x18, 0xc5, 0xc9, 0x7f, 0xff, 0x75, 0xdd, 0xb7, 0x2a, 0x12, 0x64, 0x84, 0x5e, 0x95, 0xa2, 0xd2,
	0x1b, 0x3b, 0xd1, 0x27, 0xd0, 0x0b, 0x61, 0x97, 0xeb, 0x2e, 0x04, 0xef, 0x6a, 0x13, 0x66, 0xa1,
	0x34, 0x5d, 0xbe, 0x44, 0x61, 0x8f, 0xe8, 0x53, 0x49, 0x92, 0xb6, 0x6e, 0x82, 0x97, 0xe7, 0x9c,
	0x1f, 0xdf, 0x09, 0x27, 0xb0, 0xec, 0x94, 0xd4, 0x12, 0x57, 0x3b, 0xd5, 0x55, 0xab, 0xbd, 0xa9,
	0x0f, 0xb9, 0x33, 0x62, 0x76, 0xec, 0xa3, 0x2e, 0xb5, 0x41, 0x9f, 0xa4, 0xd7, 0xb0, 0xd8, 0x98,
	0xfa, 0x50, 0x88, 0xbd, 0x11, 0xa8, 0xe9, 0x12, 0x02, 0x83, 0x42, 0xad, 0x39, 0x23, 0x09, 0xc9,
	0xe6, 0x45, 0xaf, 0xd2, 0x02, 0xc0, 0x62, 0x8f, 0x2d, 0x7e, 0x0a, 0xf5, 0x17, 0x65, 0xfd, 0xd2,
	0x11, 0xec, 0x9f, 0xf7, 0xbd, 0xa2, 0x97, 0x30, 0xed, 0xde, 0xa5, 0x96, 0x6c, 0x92, 0x90, 0x2c,
	0x2a, 0xbc, 0x48, 0xbf, 0x08, 0x84, 0x1b, 0xdb, 0x5a, 0xcb, 0x96, 0x32, 0x98, 0x55, 0x4d, 0x89,
	0x38, 0xde, 0x1c, 0xa4, 0x4d, 0x76, 0x4a, 0x9a, 0x6e, 0xcd, 0xfb, 0xab, 0x83, 0xb4, 0x89, 0x2f,
	0x40, 0x36, 0x49, 0x26, 0x36, 0xe9, 0x25, 0xbd, 0x82, 0x33, 0xd7, 0x31, 0x9c, 0x67, 0xff, 0x13,
	0x92, 0x85, 0xc5, 0xa9, 0x49, 0x6f, 0xe0, 0xbc, 0x6a, 0x24, 0x0a, 0x3e, 0x62, 0x53, 0x87, 0xfd,
	0x72, 0x69, 0x0a, 0x91, 0xec, 0x44, 0x3b, 0x52, 0x81, 0xa3, 0x4e, 0xbc, 0x7b, 0xee, 0x77, 0xdc,
	0x0a, 0xf5, 0x51, 0x57, 0x82, 0xde, 0xc2, 0xc5, 0x4b, 0x59, 0xeb, 0x67, 0xa9, 0x06, 0x02, 0x69,
	0x94, 0x1f, 0x2d, 0x1d, 0xcf, 0xf3, 0x21, 0xb9, 0x23, 0xf6, 0x25, 0x7e, 0xda, 0xb1, 0x73, 0x91,
	0xff, 0xec, 0x1d, 0xcf, 0xf2, 0xad, 0xfb, 0xb3, 0x27, 0x78, 0x0d, 0x05, 0x37, 0x55, 0x23, 0x0d,
	0x7f, 0x0b, 0xdc, 0x07, 0x3e, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0x20, 0x7f, 0x58, 0x78, 0xf4,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuizServiceClient interface {
	WaitForQuestions(ctx context.Context, in *QuizRequest, opts ...grpc.CallOption) (QuizService_WaitForQuestionsClient, error)
	AnswerQuestion(ctx context.Context, in *QuizAnswer, opts ...grpc.CallOption) (*Status, error)
}

type quizServiceClient struct {
	cc *grpc.ClientConn
}

func NewQuizServiceClient(cc *grpc.ClientConn) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) WaitForQuestions(ctx context.Context, in *QuizRequest, opts ...grpc.CallOption) (QuizService_WaitForQuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuizService_serviceDesc.Streams[0], "/QuizService/WaitForQuestions", opts...)
	if err != nil {
		return nil, err
	}
	x := &quizServiceWaitForQuestionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuizService_WaitForQuestionsClient interface {
	Recv() (*Question, error)
	grpc.ClientStream
}

type quizServiceWaitForQuestionsClient struct {
	grpc.ClientStream
}

func (x *quizServiceWaitForQuestionsClient) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quizServiceClient) AnswerQuestion(ctx context.Context, in *QuizAnswer, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/QuizService/AnswerQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
type QuizServiceServer interface {
	WaitForQuestions(*QuizRequest, QuizService_WaitForQuestionsServer) error
	AnswerQuestion(context.Context, *QuizAnswer) (*Status, error)
}

// UnimplementedQuizServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuizServiceServer struct {
}

func (*UnimplementedQuizServiceServer) WaitForQuestions(req *QuizRequest, srv QuizService_WaitForQuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForQuestions not implemented")
}
func (*UnimplementedQuizServiceServer) AnswerQuestion(ctx context.Context, req *QuizAnswer) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestion not implemented")
}

func RegisterQuizServiceServer(s *grpc.Server, srv QuizServiceServer) {
	s.RegisterService(&_QuizService_serviceDesc, srv)
}

func _QuizService_WaitForQuestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuizRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizServiceServer).WaitForQuestions(m, &quizServiceWaitForQuestionsServer{stream})
}

type QuizService_WaitForQuestionsServer interface {
	Send(*Question) error
	grpc.ServerStream
}

type quizServiceWaitForQuestionsServer struct {
	grpc.ServerStream
}

func (x *quizServiceWaitForQuestionsServer) Send(m *Question) error {
	return x.ServerStream.SendMsg(m)
}

func _QuizService_AnswerQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuizAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).AnswerQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuizService/AnswerQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).AnswerQuestion(ctx, req.(*QuizAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuizService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnswerQuestion",
			Handler:    _QuizService_AnswerQuestion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForQuestions",
			Handler:       _QuizService_WaitForQuestions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/grpc/quiz.proto",
}
